<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
  http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 参考资料：http://code.google.com/p/bounding/wiki/SpringMVC3 -->

	<!-- 国际化配置 参考：http://hi.baidu.com/sonmeika/blog/item/8069b2dd7db1c9395882dd29.html 
		<bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"> 
		</bean> -->

	<!--配置视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/page/" />
		<property name="suffix" value=".jsp" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.InternalResourceView
			</value>
		</property>
	</bean>

	<!-- 配置注解支持 -->
	<mvc:annotation-driven />

	<!-- 对包中的所有类进行扫描，扫描注解bean，以完成Bean创建和自动依赖注入的功能 ,处理器的映射器 -->
	<context:component-scan base-package="com.zSecondAnswer" />
	<!-- 允许定义过滤器将基包下的某些类纳入或排除 <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
	<!-- </context:component-scan> -->

	<!-- 支持JSON结果返回 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>text/json;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="5242880"></property>
		<property name="maxInMemorySize" value="40960"></property>
	</bean>

	

	 <!-- redis连接池的配置信息 -->
	 
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 说明一个pool可以有多少个Jedis实例 -->
		<property name="maxActive" value="${redis.pool.maxActive}" />
		<!-- 最大Idle -->
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<!-- 最小Idle -->
		<property name="minIdle" value="${redis.pool.minIdle}" />
		<!-- 获得一个jedis实例的时候是否检查连接可用性（ping()） -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<!-- return 一个jedis实例给pool时，是否检查连接可用性（ping()） -->
		<property name="testOnReturn" value="${redis.pool.testOnReturn}" />
		<!-- idle状态监测用异步线程evict进行检查， -->
		<property name="testWhileIdle" value="${redis.pool.testWhileIdle}" />
		<!-- 一次最多evict的pool里的jedis实例个数 -->
		<property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}" />
		<!-- test idle 线程的时间间隔 -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
		<!--最大等待wait时间 -->
		<property name="maxWait" value="${redis.pool.maxWait}" />
		<!-- WHEN_EXHAUSTED_FAIL = 0; 直接抛出异常throw new NoSuchElementException("Pool exhausted");  -->
		<!-- WHEN_EXHAUSTED_BLOCK = 1;borrowObject()将会阻塞，直到有可用新的或者空闲的object为止，或者如果配置了maxWait，
		如果请求阻塞超时，将抛出NoSuchElementException.如果maxWait为负数，请求将会无限制的阻 塞下去，默认配置。 -->
		<!-- WHEN_EXHAUSTED_GROW = 2;borrowObject()将会继续创建新的对象，并返回，因此，pool维护的对像数将超出maxActive； -->
		<property name="whenExhaustedAction" value="${redis.pool.whenExhaustedAction}" />
	</bean>

	<!-- redis的连接池pool，不是必选项：timeout/password -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" />
		<constructor-arg index="2" value="${redis.port}" type="int" />
		<constructor-arg index="3" value="300000" type="int" />
	</bean>


</beans>